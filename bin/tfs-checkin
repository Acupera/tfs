#!/usr/bin/env node

var hasError = false,
    program  = require('commander'),
    tfsCheckin = require('../lib/tfs/checkin');

program
  .description('Commits pending changes in the current workspace to the server for Team Foundation version control.Required PermissionsTo use the checkin command you must have the Check in permission set to Allow. To use /author option, you must have Check in other user\'s changes permission set to Allow. For more information, see Team Foundation Server Permissions.')
  .usage('[itemspec] [options]')
  .option('-a, --author', 'The user-provided value for the /author option.')
  .option('-c, --comment', 'A user-provided comment about the check-in.')
  .option('-n, --noprompt', 'The user-provided path of a file on disk that contains the comment for the check-in.')
  .option('-n, --notes', 'Sets the value of the check-in note field. You can provide multiple, semicolon-separated \"field=value\" expressions.')
  .option('-o, --override', 'The user-provided path of a file on disk that contains check-in note field names and values in the format of \"field=value\" A semicolon separated note tile can span multiple lines, for example:')
  .option('-r, --recursive', 'A user-provided description of the reason why the check-in policy is being ignored. If a reason is specified, a notification of the policy override and this explanation is sent to Team Foundation administrators by e-mail.')
  .option('-s, --saved', 'Specifies a file or folder to check-in. For more information about how Team Foundation parses a file specification to determine which items are within its scope, see Command-Line Options.')
  .option('-v, --validate', 'Provides a value to the /login option. You can specify a username value as either DOMAIN\\UserName or UserName.')
  .option('-b, --bypass', 'Identifies the shelveset that you want to check in. The optional owner argument is used to specify a shelveset that the current user does not own.')
  .option('-l, --login', 'The URL of the team project collection that contains the files or folders that you want to check in (for example, http://myserver:8080/tfs/DefaultCollection).')
  .option('-s, --shelveset', 'Identifies the author of the pending changes so that one user can check in changes on behalf of another user.')
  .option('-c, --collection', 'Associates a comment with the changeset. ')
  .option('-V, --verbose', 'Verbose mode.')
  .parse(process.argv);

var options = {
  author: program.author,
  comment: program.comment,
  noprompt: program.noprompt,
  notes: program.notes,
  override: program.override,
  recursive: program.recursive,
  saved: program.saved,
  validate: program.validate,
  bypass: program.bypass,
  login: program.login,
  shelveset: program.shelveset,
  collection: program.collection,
  verbose: program.verbose
};

tfsCheckin(program.args, options);
