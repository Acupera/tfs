#!/usr/bin/env node

var hasError = false,
    output   = require('../lib/utils/output'),
    program  = require('commander'),
    tfsAdd   = require('../lib/tfs/add');

program
  .description('Adds files and folders from a local file system to a server for Team Foundation version control.Note   The results of this command are not reflected in the server for Team Foundation version control until you perform a check-in operation. For more information, see Check In Pending Changes.Required PermissionsTo use the add command, you must own the workspace and your Check out permission for the parent folder of the new items must be set to Allow. Your Lock permission must also be set to Allow if you use /lock:checkout or /lock:checkin. For more information, see Team Foundation Server Permissions.')
  .usage('[itemspec] [options]')
  .option('-L, --lock <none|checkin|checkout>', 'Prevents other users from checking in or checking out the specified files.', /^(none|checkin|checkout)$/i)
  .option('-l, --login <username,[password]>', 'Specifies the user account to run the command.', /^[^,]*,/)
  .option('-N, --noignore', 'Overrides .tfignore rule(s) ignoring this itemspec.')
  .option('-n, --noprompt', 'Suppresses the display of windows and dialog boxes and redirects output data to the command prompt.')
  .option('-r, --recursive', 'Recursively adds items in the specified directory and any subdirectories.')
  // .option('-t, --encoding <filetype>', 'Ignore this parameter.')
  .option('-V, --verbose', 'Verbose mode.')
  .parse(process.argv);

if (program.lock && typeof program.lock === 'boolean') {
  output.error('--lock option MUST be <none|checkin|checkout>".');
  hasError = true;
}

if (program.login && typeof program.login === 'boolean') {
  output.error('--login option MUST be <username,[password]>.');
  hasError = true;
}

if (hasError) {
  program.outputHelp();
  process.exit();
}

var options = {
  lock: program.lock,
  login: program.login,
  noignore: program.noignore,
  noprompt: program.noprompt,
  recursive: program.recursive,
  // type: program.type,
  verbose: program.verbose
};

tfsAdd(program.args, options, output.callback);
